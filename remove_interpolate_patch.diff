diff --git a/app/reporting/services/ReportsService.scala b/app/reporting/services/ReportsService.scala
index d420343..1c64fc9 100644
--- a/app/reporting/services/ReportsService.scala
+++ b/app/reporting/services/ReportsService.scala
@@ -1,19 +1,18 @@
 package reporting.services
 
-import com.mongodb.casbah.MongoCollection
 import com.mongodb.casbah.Implicits._
+import com.mongodb.casbah.MongoCollection
 import com.mongodb.casbah.map_reduce._
 import com.mongodb.{ BasicDBObject, DBObject }
-import reporting.models.ReportLineResult.{ KeyCount, LineResult }
-import reporting.models.ReportLineResult
 import org.bson.types.ObjectId
-
 import org.corespring.platform.core.models.ContentCollection
-import org.corespring.common.utils.string
+import reporting.models.ReportLineResult
+import reporting.models.ReportLineResult.{KeyCount, LineResult}
+
 
 class ReportsService(ItemCollection: MongoCollection,
-  SubjectCollection: MongoCollection,
-  CollectionsCollection: MongoCollection,
+                     SubjectCollection: MongoCollection,
+                     CollectionsCollection: MongoCollection,
   StandardCollection: MongoCollection) {
 
   def getCollections: List[(String, String)] = ContentCollection.findAll().toList.map {
@@ -24,8 +23,8 @@ class ReportsService(ItemCollection: MongoCollection,
 
     populateHeaders
 
-    val mapTemplateFn: JSFunction =
-      """ function m() {
+    def mapTemplateFn(collectionId: String, property: String): JSFunction =
+      s""" function m() {
             if( "${collectionId}" != "all" && (!this.collectionId || !(this.collectionId == "${collectionId}")) ){
               return;
             }
@@ -41,7 +40,7 @@ class ReportsService(ItemCollection: MongoCollection,
             }
           };"""
 
-    val mapFn: JSFunction = interpolate(mapTemplateFn, Map("collectionId" -> collectionId, "property" -> queryType))
+    val mapFn: JSFunction = mapTemplateFn(collectionId, queryType)
     val cmd = MapReduceCommand(ItemCollection.name, mapFn, JSFunctions.ReduceFn, MapReduceInlineOutput)
 
     val result: MapReduceResult = ItemCollection.mapReduce(cmd)
@@ -151,7 +150,7 @@ class ReportsService(ItemCollection: MongoCollection,
 
     populateHeaders
 
-    val mapFn: JSFunction = interpolate(JSFunctions.SimplePropertyMapFnTemplate, Map("property" -> "contributorDetails.contributor"))
+    val mapFn: JSFunction = JSFunctions.SimplePropertyMapFnTemplate("contributorDetails.contributor")
 
     val cmd = MapReduceCommand(ItemCollection.name, mapFn, JSFunctions.ReduceFn, MapReduceInlineOutput)
     val result: MapReduceResult = ItemCollection.mapReduce(cmd)
@@ -202,9 +201,9 @@ class ReportsService(ItemCollection: MongoCollection,
   private def runMapReduceForProperty(keyCounts: List[KeyCount],
     property: String,
     query: BasicDBObject,
-    mapTemplateFn: JSFunction = JSFunctions.SimplePropertyMapFnTemplate) {
+    mapTemplateFn: (JSFunction => JSFunction) = JSFunctions.SimplePropertyMapFnTemplate) {
 
-    val mapFn: JSFunction = interpolate(mapTemplateFn, Map("property" -> property))
+    val mapFn: JSFunction = mapTemplateFn(property)
     val cmd = MapReduceCommand(ItemCollection.name, mapFn, JSFunctions.ReduceFn, MapReduceInlineOutput, Some(query))
     val result: MapReduceResult = ItemCollection.mapReduce(cmd)
     val inlineResult: MapReduceInlineResult = result.asInstanceOf[MapReduceInlineResult]
@@ -245,16 +244,16 @@ class ReportsService(ItemCollection: MongoCollection,
 
   object JSFunctions {
 
-    val SimplePropertyMapFnTemplate: JSFunction = """function m() {
+    def SimplePropertyMapFnTemplate(property: String): JSFunction = s"""function m() {
                                           try {
-                                          if( this.${property} ){
-                                            emit(this.${property}, 1);
+                                          if( this.$property ){
+                                            emit(this.$property, 1);
                                           }
                                           } catch (e) {
                                           }
                                         };"""
 
-    val ArrayPropertyMapTemplateFn: JSFunction = """function m(){
+    def ArrayPropertyMapTemplateFn(property: String): JSFunction = s"""function m(){
                                           if( this.${property} ){
                                             for(var i = 0; i < this.${property}.length; i++ ){
                                               emit(this.${property}[i], 1);
@@ -262,7 +261,7 @@ class ReportsService(ItemCollection: MongoCollection,
                                           }
   }"""
 
-    val ReduceFn: JSFunction = """function r(key, values) {
+    def ReduceFn: JSFunction = """function r(key, values) {
                                        var count = 0;
                                         for (index in values) {
                                           count += values[index];
@@ -304,8 +303,4 @@ class ReportsService(ItemCollection: MongoCollection,
       licenseTypeKeyCount)
   }
 
-  private def interpolate(text: String, vars: Map[String, String]) = {
-    string.interpolate(text, (k) => vars.getOrElse(k, ""), """\$\{([^}]+)\}""".r)
-  }
-
 }
