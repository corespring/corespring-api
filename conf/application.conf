application.global = Global

# Secret key
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "na/afG<WVlFHscBia/dAe]a@X^9GE:;8Oq3I[XoU^X[bbnEN^cWREnvs5wiPDwl9"

# The application languages
application.langs = "en"

archive {
  contentCollectionId: "500ecfc1036471f538f24bdc"
  orgId: "52e68c0bd455283f1744a721"
}

# Amazon stuff
AMAZON_BASE_URL = "http://s3.amazonaws.com"
AMAZON_ASSETS_BUCKET = "corespring-assets-dev"
AMAZON_ASSETS_BUCKET = ${?ENV_AMAZON_ASSETS_BUCKET}
AMAZON_TEST_BUCKET = "s3-deployer-test-bucket"
AMAZON_TEST_BUCKET = ${?ENV_AMAZON_TEST_BUCKET}
AMAZON_ACCESS_KEY = "AKIAJNPUNTVH2HMFWVVA"
AMAZON_ACCESS_KEY = ${?ENV_AMAZON_ACCESS_KEY}
AMAZON_ACCESS_SECRET = "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"
AMAZON_ACCESS_SECRET = ${?ENV_AMAZON_ACCESS_SECRET}
# This is only useful for test/dev environments
AMAZON_ENDPOINT = ${?ENV_AMAZON_ENDPOINT}

# To make cdn testing easier
# Simply change the version if you want to start with a fresh cdn cache
APP_VERSION_OVERRIDE = ${?ENV_APP_VERSION_OVERRIDE}

# DynamoDb
# Use Dynamo instead of the default (mongo)
DYNAMO_DB_ACTIVATE = false
DYNAMO_DB_ACTIVATE = ${?ENV_DYNAMO_DB_ACTIVATE}
# Use local db. Make sure you have started it
DYNAMO_DB_USE_LOCAL = true
DYNAMO_DB_USE_LOCAL = ${?ENV_DYNAMO_DB_USE_LOCAL}
# Set the port of the local dynamo db if it conflicts with your env
DYNAMO_DB_LOCAL_PORT = 8000
DYNAMO_DB_LOCAL_PORT = ${?ENV_DYNAMO_DB_LOCAL_PORT}
# Do you want the tables to be dropped and recreated on start?
# If a table does not exist, it is created anyway
DYNAMO_DB_LOCAL_INIT = false
DYNAMO_DB_LOCAL_INIT = ${?ENV_DYNAMO_DB_LOCAL_INIT}

# Session Service
SESSION_SERVICE = "mongo"
SESSION_SERVICE = ${?ENV_SESSION_SERVICE}
SESSION_SERVICE_URL = ${?ENV_SESSION_SERVICE_URL}
SESSION_SERVICE_AUTHTOKEN = ${?ENV_SESSION_SERVICE_AUTHTOKEN}

# ElasticSearch
ELASTIC_SEARCH_URL = "http://localhost:9200"
ELASTIC_SEARCH_URL = ${?BONSAI_URL}
ELASTIC_SEARCH_URL = ${?ENV_ELASTIC_SEARCH_URL}

ALLOW_ALL_SESSIONS = ${?ENV_ALLOW_ALL_SESSIONS}

COMPONENT_FILTERING_ENABLED = true
COMPONENT_FILTERING_ENABLED = ${?COMPONENT_FILTERING_ENABLED}

# Logger - @see logger.xml + logging/*.xml

# Salat/Mongo Settings
# For more options see: https://github.com/leon/play-salat
dbplugin = disabled
evolutionplugin = disabled

ehcacheplugin = enabled
#ENV_EHCACHE_STATUS = enabled|disabled
ehcacheplugin = ${?ENV_EHCACHE_STATUS}

#using memcache
memcachedplugin = disabled
memcachedplugin = ${?ENV_MEMCACHED_PLUGIN}
memcached.host = "127.0.0.1:11211"
memcached.host = ${?MEMCACHIER_SERVERS}
memcached.user = ${?MEMCACHIER_USERNAME}
memcached.password = ${?MEMCACHIER_PASSWORD}

#rabbit-mq configuration
rabbitmq.host = localhost
rabbitmq.host = ${?CLOUDAMQP_URL}

#dispatcher for actors. see:
#http://doc.akka.io/docs/akka/2.1.1/scala/dispatchers.html#dispatcher-lookup-scala
rabbitmq-worker-dispatcher = {
  type = BalancingDispatcher
  throughput = 1
}
rabbitmq-delivery-dispatcher = {
  type = PinnedDispatcher
}

# Demo Org Id - this org id is used to allow preview of demo content.
# It should be the oid of the 'Demo Org' in the database that has access to the demo content.
DEMO_ORG_ID = "502404dd0364dc35bb39339a"
DEMO_ORG_ID = ${?ENV_DEMO_ORG_ID}

V2_PLAYER_ORG_IDS = "502404dd0364dc35bb393398,502404dd0364dc35bb39339c"
V2_PLAYER_ORG_IDS = ${?ENV_V2_PLAYER_ORG_IDS}

#Root Org Id - this org id is used by corespring folks only.
ROOT_ORG_ID = "502404dd0364dc35bb393398"
ROOT_ORG_ID = ${?ENV_ROOT_ORG_ID}

#how long the token lasts until it becomes invalid
TOKEN_DURATION = 24

api {
  # log api requests?
  log-requests = true
  log-requests = ${?ENV_LOG_API_REQUESTS}
}

v2 {
  itemTransformer {
    ## CA-1957 - allow model checking to be enabled
    checkModelIsUpToDate = true
    checkModelIsUpToDate = ${?ENV_CHECK_CACHE_IN_V2_ITEM_TRANSFORM}
  }

  auth {
    cache {
      # How long to cache the apiClient + Org info before re-requesting it from the db
      ApiClientService {
        enabled = ${?V2_AUTH_CACHE_API_CLIENT}
        ttl-in-minutes = 3
        ttl-in-minutes = ${?V2_AUTH_CACHE_API_CLIENT_TTL_IN_MINUTES}
      }

      ApiClientEncryptionService {
        # Cache decrypted options for the org (default: false)
        # Saves having to look up the api client in the db and then running a decrypt
        enabled = ${?V2_AUTH_CACHE_DECRYPTED_OPTIONS}
        # How long should the cached decrypted options live for in minutes (default: 10)
        ttl-in-minutes = ${?V2_AUTH_CACHE_DECRYPTED_OPTIONS_TTL_IN_MINUTES}
      }

      TokenService {
        # Cache calls to orgForToken(token:String):Validation[V2Error,Organization]
        enabled = ${?V2_AUTH_CACHE_TOKEN_SERVICE}
        ttl-in-minutes = ${?V2_AUTH_CACHE_TOKEN_SERVICE_TTL_IN_MINUTES}
      }
    }
  }
}

# Corespring container integration
container {

  editor: {
    autosave: {
      debounceInMillis: 5000
      debounceInMillis: ${?EDITOR_DEBOUNCE_IN_MILLIS}
    }
  }
  components {
    showNonReleasedComponents = ${?ENV_SHOW_NON_RELEASED_COMPONENTS}
    path = "corespring-components/components"
    path = ${?CONTAINER_COMPONENTS_PATH}
  }
  common {
    DEV_TOOLS_ENABLED = false
    DEV_TOOLS_ENABLED = ${?ENV_DEV_TOOLS_ENABLED}
  }
  cdn {
    domain = ${?CONTAINER_CDN_DOMAIN}

    # Useful for versioning the files - instead of invalidating them.
    # The distrubution must be configured to forward query params
    add-version-as-query-param = true
    add-version-as-query-param = ${?CONTAINER_CDN_ADD_VERSION_AS_QUERY_PARAM}
  }
}

item-asset-resolver {
  cdn {
    domain = ${?ENV_IAR_CDN_DOMAIN}

    # Useful for versioning the files - instead of invalidating them.
    # The distrubution must be configured to forward query params
    add-version-as-query-param = true
    add-version-as-query-param = ${?ENV_IAR_CDN_ADD_VERSION_AS_QUERY_PARAM}

    key-pair-id = ${?ENV_IAR_CDN_KEY_PAIR_ID}
    private-key = ${?ENV_IAR_CDN_PRIVATE_KEY}

    sign-urls = false
    sign-urls = ${?ENV_IAR_CDN_SIGN_URLS}

    url_valid_in_hours = 24
    url_valid_in_hours = ${?ENV_IAR_CDN_URL_VALID_IN_HOURS}
  }
}


# Prod fallback
container-prod.components.path = "/app/corespring-components/components"
container-prod.components.path = ${?CONTAINER_COMPONENTS_PATH}

DEV_TOOLS_ENABLED = false
DEV_TOOLS_ENABLED = ${?ENV_DEV_TOOLS_ENABLED}


# MongoURI
# ~~~~~
# a MongoURI can also be used http://www.mongodb.org/display/DOCS/Connections

mongodb {
  default {
    uri = "mongodb://127.0.0.1:27017/api"
    uri = ${?ENV_MONGO_URI}
    options {
      connectTimeout = 25000
      connectTimeout = ${?MONGO_CONNECT_TIMEOUT}
      socketTimeout = 60000
      socketTimeout = ${?MONGO_SOCKET_TIMEOUT}
      connectionsPerHost = 500 # Default is 100 (http://api.mongodb.org/java/current/com/mongodb/MongoClientOptions.html#getConnectionsPerHost())
      connectionsPerHost = ${?MONGO_CONNECTIONS_PER_HOST}
      threadsAllowedToBlockForConnectionMultiplier = 1 # Default is 5 (http://api.mongodb.org/java/current/com/mongodb/MongoClientOptions.html#getThreadsAllowedToBlockForConnectionMultiplier())
      threadsAllowedToBlockForConnectionMultiplier = ${?MONGO_THREAD_MULTIPLIER}
    }
  }
}

newrelic {
  enabled = false
  enabled = ${?NEW_RELIC_RUM_ENABLED}
  license-key = ${?NEW_RELIC_RUM_LICENSE_KEY}
  application-id = ${?NEW_RELIC_RUM_APPLICATION_ID}
}

include "akka.conf"
include "assets-loader"
include "securesocial.conf"

