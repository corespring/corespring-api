# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static developer site..


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

#developer home page with secure social integration
GET     /developer/login         developer.controllers.Developer.login
GET     /developer/register      developer.controllers.Developer.register
GET     /developer/isloggedin       developer.controllers.Developer.isLoggedIn
GET     /developer/logout  developer.controllers.Developer.logout
GET     /developer/org         developer.controllers.Developer.getOrganization
GET     /developer/org/form     developer.controllers.Developer.createOrganizationForm
POST    /developer/org         developer.controllers.Developer.createOrganization
GET     /developer/org/:orgid  developer.controllers.Developer.getOrganizationCredentials(orgid: ObjectId)

GET     /developer/home             developer.controllers.Developer.home
GET     /developer/*file            developer.controllers.Developer.at(path="/public/developer", file)



#
# Auth endpoints
#
POST    /auth/register                          controllers.auth.AuthController.register
POST    /auth/access_token                      controllers.auth.AuthController.getAccessToken

#Public site
GET     /                                      publicsite.controllers.Application.index
GET     /public/educators                             publicsite.controllers.Application.educators
GET     /public/contact                                publicsite.controllers.Application.contact
GET     /public/partnerships                           publicsite.controllers.Application.partnerships
GET     /public/about                                   publicsite.controllers.Application.about
GET     /public/items                                  publicsite.controllers.Application.getItems
# Example content
GET    /example-content/items                  publicsite.controllers.ExampleContent.items(q: Option[String] ?= None)

#
# V1 API
#

# Organizations
GET     /api/v1/organizations                   api.v1.OrganizationApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100, sort:Option[String] ?= None)
GET     /api/v1/organizations/children          api.v1.OrganizationApi.getChildren(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100, sort:Option[String] ?= None)
GET     /api/v1/organizations/default           api.v1.OrganizationApi.getDefaultOrganization
GET     /api/v1/organizations/:id               api.v1.OrganizationApi.getOrganization(id: ObjectId)
PUT     /api/v1/organizations/:id               api.v1.OrganizationApi.updateOrganization(id: ObjectId)
DELETE  /api/v1/organizations/:id               api.v1.OrganizationApi.deleteOrganization(id: ObjectId)
GET     /api/v1/organizations/:id/tree          api.v1.OrganizationApi.listWithOrg(id:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100, sort:Option[String] ?= None)
GET     /api/v1/organizations/:id/children      api.v1.OrganizationApi.getChildrenWithOrg(id:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100, sort:Option[String] ?= None)


# Collections
GET     /api/v1/collections                     api.v1.CollectionApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
GET     /api/v1/collections/:id                 api.v1.CollectionApi.getCollection(id: ObjectId)
GET     /api/v1/organizations/:orgId/collections    api.v1.CollectionApi.listWithOrg(orgId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
POST    /api/v1/collections                     api.v1.CollectionApi.createCollection
PUT     /api/v1/collections/:id                 api.v1.CollectionApi.updateCollection(id: ObjectId)
DELETE  /api/v1/collections/:id                 api.v1.CollectionApi.deleteCollection(id: ObjectId)

# Users
GET     /api/v1/users                           api.v1.UserApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
GET     /api/v1/users/:id                       api.v1.UserApi.getUser(id: ObjectId)
POST    /api/v1/users                           api.v1.UserApi.createUser
PUT     /api/v1/users/:id                       api.v1.UserApi.updateUser(id: ObjectId)
DELETE  /api/v1/users/:id                       api.v1.UserApi.deleteUser(id: ObjectId)
GET     /api/v1/organizations/:orgId/users             api.v1.UserApi.getUsersByOrg(orgId: ObjectId)

# Items API
GET     /api/v1/items                           api.v1.ItemApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
GET     /api/v1/organizations/:orgId/items      api.v1.ItemApi.listWithOrg(orgId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
GET     /api/v1/contributors                    api.v1.ContributorApi.getContributorsList()
GET     /api/v1/items/:id                       api.v1.ItemApi.get(id: ObjectId)
GET     /api/v1/collections/:collId/items       api.v1.ItemApi.listWithColl(collId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
DELETE  /api/v1/items/:id                       api.v1.ItemApi.delete(id: ObjectId)
GET     /api/v1/items/:id/detail                api.v1.ItemApi.getDetail(id: ObjectId)
GET     /api/v1/items/:id/data                  api.v1.ItemApi.getData(id: ObjectId)
POST    /api/v1/items                           api.v1.ItemApi.create
PUT     /api/v1/items/:id                       api.v1.ItemApi.update(id: ObjectId)
POST    /api/v1/items/:id                       api.v1.ItemApi.cloneItem(id:ObjectId)
GET     /api/v1/collections/:collId/items       api.v1.ItemApi.getItemsInCollection(collId: ObjectId)

# Exporter api
GET     /api/v1/items/multiple/scorm-2004.zip       api.v1.ExporterApi.multiItemScorm2004(ids:String)
GET     /api/v1/items/multiple/item_launch.imscc    api.v1.ExporterApi.multiItemLti(ids:String)

# Resource api
GET     /api/v1/items/:itemId/materials          api.v1.ResourceApi.getSupportingMaterials(itemId:String)
POST    /api/v1/items/:itemId/materials          api.v1.ResourceApi.createSupportingMaterial(itemId:String)
POST    /api/v1/items/:itemId/materialsWithFile/:name/:filename          api.v1.ResourceApi.createSupportingMaterialWithFile(itemId:String, name, filename )
DELETE  /api/v1/items/:itemId/materials/:resourceName          api.v1.ResourceApi.deleteSupportingMaterial(itemId:String, resourceName : String)
POST    /api/v1/items/:itemId/materials/:resourceName   api.v1.ResourceApi.createSupportingMaterialFile(itemId:String, resourceName : String)
PUT     /api/v1/items/:itemId/materials/:resourceName/:filename   api.v1.ResourceApi.updateSupportingMaterialFile(itemId:String, resourceName : String, filename : String)
POST    /api/v1/items/:itemId/materials/:resourceName/:filename/upload   api.v1.ResourceApi.uploadFile(itemId:String, resourceName : String, filename : String )
DELETE  /api/v1/items/:itemId/materials/:resourceName/:filename   api.v1.ResourceApi.deleteSupportingMaterialFile(itemId:String, resourceName : String, filename : String)

POST    /api/v1/items/:itemId/data         api.v1.ResourceApi.createDataFile(itemId:String)
PUT     /api/v1/items/:itemId/data/:filename         api.v1.ResourceApi.updateDataFile(itemId:String, filename:String)
POST    /api/v1/items/:itemId/data/:filename/upload   api.v1.ResourceApi.uploadFileToData(itemId:String, filename : String )
DELETE  /api/v1/items/:itemId/data/:filename         api.v1.ResourceApi.deleteDataFile(itemId:String, filename:String)

# Field Values API
GET     /api/v1/field_values                   api.v1.FieldValuesApi.getAllAvailable
GET     /api/v1/field_values/multiple        api.v1.FieldValuesApi.multiple(fieldNames:String, fieldOptions: Option[String] ?= None, c ?= "false" )
GET     /api/v1/field_values/:fieldName        api.v1.FieldValuesApi.getFieldValues(fieldName:String, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)

# Item Session API

POST    /api/v1/items/:itemId/sessions                         api.v1.ItemSessionApi.create(itemId: ObjectId)
GET     /api/v1/items/:itemId/sessions                         api.v1.ItemSessionApi.list(itemId:ObjectId)
GET     /api/v1/items/:itemId/sessions/:sessionId              api.v1.ItemSessionApi.get(itemId:ObjectId, sessionId: ObjectId)
PUT     /api/v1/items/:itemId/sessions/:sessionId              api.v1.ItemSessionApi.update(itemId: ObjectId, sessionId: ObjectId, action : Option[String] ?= None)

# Item Rendering
GET    /testplayer/item/:itemId/render              testplayer.controllers.ItemPlayer.renderItem(itemId, printMode: Boolean ?= false, settings : String ?= "")
GET    /testplayer/item/:itemId/run                 testplayer.controllers.ItemPlayer.previewItem(itemId, printMode: Boolean ?= false, settings : String ?= "")
GET    /testplayer/item/:itemId/:filename           testplayer.controllers.ItemPlayer.getDataFile(itemId, filename)
GET    /testplayer/session/:sessionId/run           testplayer.controllers.ItemPlayer.previewItemBySessionId(sessionId, printMode: Boolean ?= false)
GET    /testplayer/session/:sessionId/render        testplayer.controllers.ItemPlayer.renderItemBySessionId(sessionId, printMode: Boolean ?= false)
GET    /testplayer/session/:sessionId/:filename     testplayer.controllers.ItemPlayer.getDataFileBySessionId(sessionId, filename)
GET    /testplayer/javascripts/routes               testplayer.controllers.ItemPlayer.javascriptRoutes

GET    /scorm-player/item/:itemId/run               scorm.controllers.ScormPlayer.runByItemId(itemId : ObjectId)
GET    /scorm-player/item/:itemId/:filename         scorm.controllers.ScormPlayer.getDataFile(itemId, filename)
GET    /scorm-player/session/:sessionId/run         scorm.controllers.ScormPlayer.runBySessionId(sessionId : ObjectId)
GET    /scorm-player/session/:sessionId/:filename   scorm.controllers.ScormPlayer.getDataFileBySessionId(sessionId : ObjectId, filename)


# Web tier
GET    /web                                    web.controllers.Main.index
# Item Preview
GET     /web/item-preview/:itemId              web.controllers.Main.previewItem(itemId:String)
GET     /web/item-preview                      web.controllers.Main.previewAnyItem

GET    /web/partials/editItem                  web.controllers.Partials.editItem
GET    /web/partials/createItem                web.controllers.Partials.createItem
GET    /web/partials/home                      web.controllers.Partials.home
GET    /web/partials/viewItem                  web.controllers.Partials.viewItem


GET    /web/javascripts/routes                             web.controllers.ShowResource.javascriptRoutes
GET    /web/show-resource/:itemId/data/main                web.controllers.ShowResource.renderDataResource(itemId)
GET    /web/show-resource/:itemId/data/:filename           web.controllers.ShowResource.getDataFile(itemId:String,filename:String)
GET    /web/show-resource/:itemId/:resourceName            web.controllers.ShowResource.renderResource(itemId,resourceName)
GET    /web/show-resource/:itemId/:resourceName/:filename  web.controllers.ShowResource.getResourceFile(itemId:String,resourceName:String,filename:String)

GET    /web/print-resource/:itemId/data/main                web.controllers.ShowResource.renderDataResourceForPrinting(itemId)
GET    /web/print-resource/:itemId/data/:filename           web.controllers.ShowResource.getDataFile(itemId:String,filename:String)
GET    /web/print-resource/:itemId/:resourceName/:filename  web.controllers.ShowResource.getResourceFile(itemId:String,resourceName:String,filename:String)
GET    /web/print-resource/:itemId/:resourceName            web.controllers.ShowResource.renderResource(itemId,resourceName)
GET    /web/print-resource-profile/:itemId                  web.controllers.Main.renderProfile(itemId:String)

#
# BasicLTI
#
GET     /lti/launch-config/:id                  basiclti.controllers.LaunchConfig.get(id:ObjectId)
PUT     /lti/launch-config/:id                  basiclti.controllers.LaunchConfig.update(id:ObjectId)
GET     /lti/dev/test-harness                   basiclti.controllers.dev.TestHarness.begin
POST    /lti/dev/prepare                        basiclti.controllers.dev.TestHarness.prepare
POST    /lti/dev/grade-passback                 basiclti.controllers.dev.TestHarness.gradePassback
GET     /lti/item-chooser.xml                   basiclti.controllers.AssignmentLauncher.xmlConfiguration
POST    /lti/assignment/launch                  basiclti.controllers.AssignmentLauncher.launch()
GET     /lti/assignment/error/authorization     basiclti.controllers.AssignmentLauncher.authorizationError
GET     /lti/assignment/:configId/:resultSourcedId/process   basiclti.controllers.AssignmentLauncher.process(configId:ObjectId,resultSourcedId:String)
GET     /lti/assignment/:configId/:resultSourcedId/run       basiclti.controllers.AssignmentPlayer.run(configId:ObjectId,resultSourcedId:String)
GET     /lti/assignment/:configId/:resultSourcedId/:filename basiclti.controllers.AssignmentPlayer.getDataFileForAssignment(configId:ObjectId, resultSourcedId:String, filename:String)
GET     /lti/chooser/partials/main              basiclti.controllers.Partials.main
GET     /lti/chooser/partials/browse            basiclti.controllers.Partials.browse
GET     /lti/chooser/partials/view              basiclti.controllers.Partials.view
# Reporting
GET    /reports                                     reporting.controllers.Reports.index
GET    /reports/:collection/:queryType.csv          reporting.controllers.Reports.getCsv(collection,queryType)
GET    /reports/standard-item-report.csv            reporting.controllers.Reports.getStandardItemReport
GET    /reports/primary-subject-item-report.csv     reporting.controllers.Reports.getPrimarySubjectItemReport
GET    /reports/contributor-item-report.csv         reporting.controllers.Reports.getContributorReport
GET    /reports/collection-item-report.csv          reporting.controllers.Reports.getCollectionReport


#
# SecureSocial routes
#
# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     developer.controllers.Developer.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              developer.controllers.Developer.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)

GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
