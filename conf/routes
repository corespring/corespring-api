# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static developer site..


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               com.ee.assets.controllers.Assets.at(path="/public", file)

#developer home page with secure social integration
GET     /developer/login            developer.controllers.Developer.login
GET     /developer/register         developer.controllers.Developer.register
GET     /developer/isloggedin       developer.controllers.Developer.isLoggedIn
GET     /developer/logout           developer.controllers.Developer.logout
GET     /developer/org              developer.controllers.Developer.getOrganization
GET     /developer/org/form         developer.controllers.Developer.createOrganizationForm
POST    /developer/org              developer.controllers.Developer.createOrganization
GET     /developer/org/:orgid       developer.controllers.Developer.getOrganizationCredentials(orgid: ObjectId)

GET     /developer/home             developer.controllers.Developer.home
GET     /developer/*file            developer.controllers.Developer.at(path="/public/developer", file)



#
# Auth endpoints
#
POST    /auth/register                          org.corespring.platform.core.controllers.auth.AuthController.register
POST    /auth/access_token                      org.corespring.platform.core.controllers.auth.AuthController.getAccessToken

->     /                      public.Routes
->     /v2-player             playerWeb.Routes
->     /api/v1                v1Api.Routes
->     /logger                clientlogging.Routes
->     /player                v1Player.Routes
->     /lti                   lti.Routes
->     /reports               reports.Routes

GET    /client/components/*file  controllers.Assets.at(path = "/container-client/bower_components", file)
GET    /client/*file             controllers.Assets.at(path = "/container-client", file)


#
# V1 API
#


GET    /scorm-player.js                                 scorm.controllers.AssetLoading.itemPlayerJavascript
GET    /scorm-player/item/:itemId/administer            scorm.controllers.ScormPlayer.administerItem(itemId : VersionedId[ObjectId])
GET    /scorm-player/item/:itemId/:filename             scorm.controllers.ScormPlayer.getDataFile(itemId : String, filename:String)
GET    /scorm-player/session/:sessionId/render          scorm.controllers.ScormPlayer.render(sessionId : ObjectId, role:String ?= "student")
GET    /scorm-player/session/:sessionId/:filename       scorm.controllers.ScormPlayer.getDataFileBySessionId(sessionId : String, filename:String)


# New Player

## Player version routing
#GET    /player/:playerVersion/:entity/:id/*rest

## Dev endpoints...
GET    /dev/tools/player/item/:itemId/administer                     dev.tools.controllers.DevViews.administerItem(itemId:VersionedId[ObjectId])
GET    /dev/tools/player/item/:itemId/*filename                      dev.tools.controllers.AssetLoading.getDataFile(itemId, filename)

GET    /dev/tools/player/session/:sessionId/render                   dev.tools.controllers.DevViews.render(sessionId:ObjectId, role:String ?= "student")
GET    /dev/tools/player/session/:sessionId/*filename                dev.tools.controllers.AssetLoading.getDataFileBySessionId(sessionId, filename)


# Web tier
GET    /web                                    web.controllers.Main.index

# Item Preview

GET    /web/partials/editItem                  web.controllers.Partials.editItem
GET    /web/partials/createItem                web.controllers.Partials.createItem
GET    /web/partials/home                      web.controllers.Partials.home
GET    /web/partials/viewItem                  web.controllers.Partials.viewItem

GET    /web/javascripts/routes                             web.controllers.ShowResource.javascriptRoutes

GET    /web/show-resource/:itemId/:resourceName/main        web.controllers.ShowResource.getDefaultResourceFile(itemId,resourceName)
GET    /web/show-resource/:itemId/:resourceName/:filename  web.controllers.ShowResource.getResourceFile(itemId,resourceName,filename)
GET    /web/print-resource/:itemId/data/main                web.controllers.ShowResource.renderDataResourceForPrinting(itemId)


# Reporting
#GET    /reports                                     reporting.controllers.Reports.index
#GET    /reports/:collection/:queryType.csv          reporting.controllers.Reports.getCsv(collection,queryType)
#GET    /reports/standard-item-report.csv            reporting.controllers.Reports.getStandardItemReport
#GET    /reports/primary-subject-item-report.csv     reporting.controllers.Reports.getPrimarySubjectItemReport
#GET    /reports/contributor-item-report.csv         reporting.controllers.Reports.getContributorReport
#GET    /reports/collection-item-report.csv          reporting.controllers.Reports.getCollectionReport


#
# SecureSocial routes
#
# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     common.controllers.UserSession.logout

# User Registration
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     developer.controllers.Developer.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              developer.controllers.Developer.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)

GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)

#system check
GET     /system/check               controllers.SystemCheck.index()

GET     /internal/utils/qti-search  internal.controllers.QtiSearch.qtiSearchPage()
POST    /internal/utils/qti-search  internal.controllers.QtiSearch.qtiSearch()

# Regression test endpoints
GET     /regression/:orgId/:itemSessionId/render            regression.controllers.Item.renderPlayer(orgId: ObjectId, itemSessionId: ObjectId)
GET     /regression/:orgId/:itemId/:requestedAccess         regression.controllers.Item.simplePlayer(requestedAccess: String, orgId: ObjectId, itemId: VersionedId[ObjectId])

