# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

#
# Auth endpoints
#
POST    /auth/register                          controllers.auth.AuthController.register
POST    /auth/access_token                      controllers.auth.AuthController.getAccessToken

#Public site
GET     /                                      publicsite.controllers.Application.index
GET     /public/collection                             publicsite.controllers.Application.collection
GET     /public/contact                                publicsite.controllers.Application.contact
GET     /public/partnerships                           publicsite.controllers.Application.partnerships
GET     /public/team                                   publicsite.controllers.Application.team
GET     /public/items                                  publicsite.controllers.Application.getItems

#
# V1 API
#

# Organizations
GET     /api/v1/organizations                   api.v1.OrganizationApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100)
GET     /api/v1/organizations/children          api.v1.OrganizationApi.getChildren(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100)
GET     /api/v1/organizations/default           api.v1.OrganizationApi.getDefaultOrganization
GET     /api/v1/organizations/:id               api.v1.OrganizationApi.getOrganization(id: ObjectId)
POST    /api/v1/organizations                   api.v1.OrganizationApi.createOrganization
PUT     /api/v1/organizations/:id               api.v1.OrganizationApi.updateOrganization(id: ObjectId)
DELETE  /api/v1/organizations/:id               api.v1.OrganizationApi.deleteOrganization(id: ObjectId)
GET     /api/v1/organizations/:id/tree          api.v1.OrganizationApi.listWithOrg(id:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100)
GET     /api/v1/organizations/:id/children      api.v1.OrganizationApi.getChildrenWithOrg(id:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 100)


# Collections
GET     /api/v1/collections                     api.v1.CollectionApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)
GET     /api/v1/collections/:id                 api.v1.CollectionApi.getCollection(id: ObjectId)
GET     /api/v1/organizations/:orgId/collections    api.v1.CollectionApi.listWithOrg(orgId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)
POST    /api/v1/collections                     api.v1.CollectionApi.createCollection
PUT     /api/v1/collections/:id                 api.v1.CollectionApi.updateCollection(id: ObjectId)
DELETE  /api/v1/collections/:id                 api.v1.CollectionApi.deleteCollection(id: ObjectId)

# Users
GET     /api/v1/users                           api.v1.UserApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)
GET     /api/v1/users/:id                       api.v1.UserApi.getUser(id: ObjectId)
POST    /api/v1/users                           api.v1.UserApi.createUser
PUT     /api/v1/users/:id                       api.v1.UserApi.updateUser(id: ObjectId)
DELETE  /api/v1/users/:id                       api.v1.UserApi.deleteUser(id: ObjectId)
GET     /api/v1/organizations/:orgId/users             api.v1.UserApi.getUsersByOrg(orgId: ObjectId)

# Items API
GET     /api/v1/items                           api.v1.ItemApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)
GET     /api/v1/organizations/:orgId/items      api.v1.ItemApi.listWithOrg(orgId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)
GET     /api/v1/items/:id                       api.v1.ItemApi.getItem(id: ObjectId)
GET     /api/v1/collections/:collId/items       api.v1.ItemApi.listWithColl(collId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)
DELETE  /api/v1/items/:id                       api.v1.ItemApi.deleteItem(id: ObjectId)
GET     /api/v1/items/:id/detail                api.v1.ItemApi.getItemDetail(id: ObjectId)
GET     /api/v1/items/:id/data                  api.v1.ItemApi.getItemData(id: ObjectId)
POST    /api/v1/items                           api.v1.ItemApi.createItem
PUT     /api/v1/items/:id                       api.v1.ItemApi.updateItem(id: ObjectId)
GET     /api/v1/collections/:collId/items       api.v1.ItemApi.getItemsInCollection(collId: ObjectId)
GET     /api/v1/items/:itemId/assets/:fileName  api.v1.FilesApi.getFile(itemId:String,fileName:String)

# Resource api
GET     /api/v1/items/:itemId/materials          api.v1.ResourceApi.getSupportingMaterials(itemId:String)
POST    /api/v1/items/:itemId/materials          api.v1.ResourceApi.createSupportingMaterial(itemId:String)
POST    /api/v1/items/:itemId/materialsWithFile/:name/:filename          api.v1.ResourceApi.createSupportingMaterialWithFile(itemId:String, name, filename )
DELETE  /api/v1/items/:itemId/materials/:resourceName          api.v1.ResourceApi.deleteSupportingMaterial(itemId:String, resourceName : String)
POST    /api/v1/items/:itemId/materials/:resourceName   api.v1.ResourceApi.createSupportingMaterialFile(itemId:String, resourceName : String)
PUT     /api/v1/items/:itemId/materials/:resourceName/:filename   api.v1.ResourceApi.updateSupportingMaterialFile(itemId:String, resourceName : String, filename : String)
POST    /api/v1/items/:itemId/materials/:resourceName/:filename/upload   api.v1.ResourceApi.uploadFile(itemId:String, resourceName : String, filename : String )
DELETE  /api/v1/items/:itemId/materials/:resourceName/:filename   api.v1.ResourceApi.deleteSupportingMaterialFile(itemId:String, resourceName : String, filename : String)

POST    /api/v1/items/:itemId/data         api.v1.ResourceApi.createDataFile(itemId:String)
PUT     /api/v1/items/:itemId/data/:filename         api.v1.ResourceApi.updateDataFile(itemId:String, filename:String)
POST    /api/v1/items/:itemId/data/:filename/upload   api.v1.ResourceApi.uploadFileToData(itemId:String, filename : String )
DELETE  /api/v1/items/:itemId/data/:filename         api.v1.ResourceApi.deleteDataFile(itemId:String, filename:String)

# Field Values API
GET     /api/v1/field_values                   api.v1.FieldValuesApi.getAllAvailable
GET     /api/v1/field_values/:fieldName        api.v1.FieldValuesApi.getFieldValues(fieldName:String, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50)

# Item Session API

POST    /api/v1/items/:itemId/sessions                         api.v1.ItemSessionApi.create(itemId: ObjectId)
GET     /api/v1/items/:itemId/sessions                         api.v1.ItemSessionApi.list(itemId:ObjectId)
GET     /api/v1/items/:itemId/sessions/:sessionId              api.v1.ItemSessionApi.get(itemId:ObjectId, sessionId: ObjectId)
PUT     /api/v1/items/:itemId/sessions/:sessionId              api.v1.ItemSessionApi.update(itemId: ObjectId, sessionId: ObjectId, action : Option[String] ?= None)

# Item Rendering
GET    /testplayer/item/:itemId/run                 testplayer.controllers.ItemPlayer.previewItem(itemId, printMode: Boolean ?= false, settings : String ?= "")
GET    /testplayer/item/:itemId/:filename           testplayer.controllers.ItemPlayer.getDataFile(itemId, filename)
GET    /testplayer/session/:sessionId/run           testplayer.controllers.ItemPlayer.previewItemBySessionId(sessionId, printMode: Boolean ?= false)
GET    /testplayer/session/:sessionId/:filename     testplayer.controllers.ItemPlayer.getDataFileBySessionId(sessionId, filename)
GET    /testplayer/javascripts/routes               testplayer.controllers.ItemPlayer.javascriptRoutes

# Example content
GET    /example-content                        web.controllers.ExampleContent.index
GET    /example-content/items                  web.controllers.ExampleContent.items(q: Option[String] ?= None)

# Web tier
GET    /web                                    web.controllers.Main.index
# Item Preview
GET     /web/item-preview/:itemId              web.controllers.Main.previewItem(itemId:String)
GET     /web/item-preview                      web.controllers.Main.previewAnyItem

GET    /web/partials/editItem                  web.controllers.Partials.editItem
GET    /web/partials/createItem                web.controllers.Partials.createItem
GET    /web/partials/home                      web.controllers.Partials.home
GET    /web/partials/viewItem                  web.controllers.Partials.viewItem

GET    /web/show-resource/:itemId/data/:filename           web.controllers.ShowResource.getDataFile(itemId:String,filename:String)
GET    /web/show-resource/:itemId/:resourceName/:filename  web.controllers.ShowResource.getResourceFile(itemId:String,resourceName:String,filename:String)
GET    /web/show-resource/:itemId                          web.controllers.ShowResource.renderDataResource(itemId)
GET    /web/show-resource/:itemId/:resourceName            web.controllers.ShowResource.renderResource(itemId,resourceName)

GET    /web/print-resource/:itemId                          web.controllers.ShowResource.renderDataResourceForPrinting(itemId)
GET    /web/print-resource/:itemId/data/:filename           web.controllers.ShowResource.getDataFile(itemId:String,filename:String)
GET    /web/print-resource/:itemId/:resourceName/:filename  web.controllers.ShowResource.getResourceFile(itemId:String,resourceName:String,filename:String)
GET    /web/print-resource/:itemId/:resourceName            web.controllers.ShowResource.renderResource(itemId,resourceName)
GET    /web/print-resource-profile/:itemId                  web.controllers.Main.renderProfile(itemId:String)

# Authentication
GET     /web/login                             web.controllers.Main.login
POST    /web/login                             web.controllers.Main.authenticate
GET     /web/logout                            web.controllers.Main.logout
GET     /web/user/info                         web.controllers.Main.userInfo
GET     /web/access_token                      web.controllers.Main.getAccessToken

#
# BasicLTI
#
POST    /basiclti                               basiclti.LtiController.launch

