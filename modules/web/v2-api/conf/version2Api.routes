GET  /sessions/:sessionId                  @org.corespring.v2.api.ItemSessionApi.get(sessionId:String)

## Check a score
## Load the score based on the saved response
GET  /sessions/:sessionId/score.json       @org.corespring.v2.api.ItemSessionApi.loadScore(sessionId:String)

POST /items/:itemId/sessions               @org.corespring.v2.api.ItemSessionApi.create(itemId:VersionedId[ObjectId])

POST /items                                @org.corespring.v2.api.ItemApi.create()

PUT  /items/:itemId/check-score.json       @org.corespring.v2.api.ItemApi.checkScore(itemId:String)

POST /player-token                         @org.corespring.v2.api.PlayerTokenApi.createPlayerToken

GET  /sessions/:sessionId                  @org.corespring.v2.api.ItemSessionApi.get(sessionId:String)

POST /items/:itemId/sessions               @org.corespring.v2.api.ItemSessionApi.create(itemId:VersionedId[ObjectId])

GET  /items/:itemId/full                   @org.corespring.v2.api.V1ItemApiProxy.get(itemId: VersionedId[ObjectId], detail : Option[String] ?= Some("normal"))

GET  /items/:itemId                        @org.corespring.v2.api.ItemApi.get(itemId:String, detail : Option[String] ?= Some("normal"))

DELETE /items/:itemId                      @org.corespring.v2.api.ItemApi.delete(itemId:String)

POST /items                                @org.corespring.v2.api.ItemApi.create()

GET  /items                                @org.corespring.v2.api.V1ItemApiProxy.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)

POST /launch-item                          @org.corespring.v2.api.ExternalModelLaunchApi.buildExternalLaunchSession()

GET  /collections/:collectionId/items      @org.corespring.v2.api.V1ItemApiProxy.listWithColl(collectionId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)

GET  /collections/:collectionId            @org.corespring.v2.api.V1CollectionApiProxy.getCollection(collectionId: ObjectId)

GET  /collections                          @org.corespring.v2.api.V1CollectionApiProxy.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)

GET  /internal/flush-caches                @org.corespring.v2.api.Utils.flushCaches

POST /items/:itemId/draft                  @org.corespring.v2.api.drafts.item.ItemDrafts.create(itemId:String)
PUT  /items/drafts/:draftId/commit         @org.corespring.v2.api.drafts.item.ItemDrafts.commit(draftId:ObjectId)
GET  /items/drafts/:draftId                @org.corespring.v2.api.drafts.item.ItemDrafts.get(draftId:ObjectId)
PUT  /items/drafts/:draftId                @org.corespring.v2.api.drafts.item.ItemDrafts.save(draftId:ObjectId)
