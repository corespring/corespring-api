GET     /items/:itemId/drafts              @org.corespring.v2.api.drafts.item.ItemDrafts.listByItem(itemId:String)
POST    /items/:itemId/draft               @org.corespring.v2.api.drafts.item.ItemDrafts.create(itemId:String)
PUT     /items/drafts/:draftId/commit      @org.corespring.v2.api.drafts.item.ItemDrafts.commit(draftId:String, force: Option[Boolean] ?= None)
#PUT     /items/drafts/:draftId/publish     @org.corespring.v2.api.drafts.item.ItemDrafts.publish(draftId:String)
PUT     /items/drafts/:draftId/clone       @org.corespring.v2.api.drafts.item.ItemDrafts.cloneDraft(draftId:String)
PUT     /items/drafts/:draftId/conflict    @org.corespring.v2.api.drafts.item.ItemDrafts.conflict(draftId:String)
GET     /items/drafts/:draftId             @org.corespring.v2.api.drafts.item.ItemDrafts.get(draftId:String, ignoreConflicts: Option[Boolean] ?= None)
PUT     /items/drafts/:draftId             @org.corespring.v2.api.drafts.item.ItemDrafts.save(draftId:String)
DELETE  /items/drafts/:draftId             @org.corespring.v2.api.drafts.item.ItemDrafts.delete(draftId:String, all: Option[Boolean] ?= None)
GET     /items/drafts                      @org.corespring.v2.api.drafts.item.ItemDrafts.getDraftsForOrg()

GET     /sessions/:sessionId               @org.corespring.v2.api.ItemSessionApi.get(sessionId:String)
POST    /sessions/:sessionId/clone         @org.corespring.v2.api.ItemSessionApi.cloneSession(sessionId: String)
PUT     /sessions/:sessionId/reopen        @org.corespring.v2.api.ItemSessionApi.reopen(sessionId: String)
PUT     /sessions/:sessionId/complete      @org.corespring.v2.api.ItemSessionApi.complete(sessionId: String)


## V1 Port to v2 (cms support)
GET /organizations/with-shared-collection/:collId @org.corespring.v2.api.OrganizationApi.getOrgsWithSharedCollection(collId: ObjectId)

## Check a score
## Load the score based on the saved response
GET  /sessions/:sessionId/score.json       @org.corespring.v2.api.ItemSessionApi.loadScore(sessionId:String)

POST /items/:itemId/sessions               @org.corespring.v2.api.ItemSessionApi.create(itemId:VersionedId[ObjectId])

POST /items                                @org.corespring.v2.api.ItemApi.create()

PUT  /items/:itemId/check-score.json       @org.corespring.v2.api.ItemApi.checkScore(itemId:String)

POST /player-token                         @org.corespring.v2.api.PlayerTokenApi.createPlayerToken

GET  /items/:itemId/full                   @org.corespring.v2.api.ItemApi.getFull(itemId: String)

GET  /items/:itemId                        @org.corespring.v2.api.ItemApi.get(itemId:String, detail : Option[String] ?= Some("normal"))

DELETE /items/:itemId                      @org.corespring.v2.api.ItemApi.delete(itemId:String)

POST /items/:itemId/clone                  @org.corespring.v2.api.ItemApi.cloneItem(itemId)

PUT /items/:itemId/publish                 @org.corespring.v2.api.ItemApi.publish(itemId)

PUT /items/:itemId/save-new-version        @org.corespring.v2.api.ItemApi.saveNewVersion(itemId)

GET  /items                                @org.corespring.v2.api.ItemApi.search(query: Option[String] ?= None)

POST /launch-item                          @org.corespring.v2.api.ExternalModelLaunchApi.buildExternalLaunchSession()


# Collections
GET  /collections                                       @org.corespring.v2.api.CollectionApi.list(q: Option[String] ?= None, f: Option[String] ?= None, c : Option[Boolean] ?= None, sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
GET  /collections/:collectionId                         @org.corespring.v2.api.CollectionApi.getCollection(collectionId: ObjectId)
GET  /collections/:collectionId/items                   @org.corespring.v2.api.ItemApi.searchByCollectionId(collectionId:ObjectId, q: Option[String] ?= None)
# V1 Api collections port
GET     /collections/:ids/fieldValues/:field            @org.corespring.v2.api.CollectionApi.fieldValuesByFrequency(ids: String, field: String)
GET     /organizations/:orgId/collections               @org.corespring.v2.api.CollectionApi.listWithOrg(orgId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c : Option[Boolean] ?= None, sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)
POST    /collections                                    @org.corespring.v2.api.CollectionApi.createCollection
PUT     /collections/:id                                @org.corespring.v2.api.CollectionApi.updateCollection(id: ObjectId)
DELETE  /collections/:id                                @org.corespring.v2.api.CollectionApi.deleteCollection(id: ObjectId)
PUT     /collections/:id/share-items                    @org.corespring.v2.api.CollectionApi.shareItemsWithCollection(id: ObjectId)
PUT     /collections/:id/un-share-items                 @org.corespring.v2.api.CollectionApi.unShareItemsWithCollection(id: ObjectId)
PUT     /collections/:id/set-enabled-status/:enabled    @org.corespring.v2.api.CollectionApi.setEnabledStatus(id: ObjectId, enabled: Boolean)
PUT     /collections/:id/share-with-org/:orgId          @org.corespring.v2.api.CollectionApi.shareCollection(id: ObjectId, orgId: ObjectId)


GET  /item-types                           @org.corespring.v2.api.ItemApi.getItemTypes()

GET /field_values/domain                   @org.corespring.v2.api.FieldValuesApi.domain()

GET  /contributors                         @org.corespring.v2.api.FieldValuesApi.contributors()

GET  /grade-levels                         @org.corespring.v2.api.FieldValuesApi.gradeLevels()
GET  /subject                              @org.corespring.v2.api.FieldValuesApi.subject(q:Option[String], l:Int ?= 0, sk:Int ?= 0)
GET  /standard                             @org.corespring.v2.api.FieldValuesApi.standard(q:Option[String], l:Int ?= 0, sk:Int ?= 0)

GET  /internal/flush-caches                @org.corespring.v2.api.Utils.flushCaches


# Metadata

GET     /metadata-sets                      @org.corespring.v2.api.MetadataApi.get

GET     /metadata-sets/:metadataSetId       @org.corespring.v2.api.MetadataApi.getById(metadataSetId: ObjectId)

GET     /item/:itemId/metadata              @org.corespring.v2.api.MetadataApi.getByItemId(itemId: VersionedId[ObjectId])

POST    /metadata-sets                      @org.corespring.v2.api.MetadataApi.create()

PUT     /metadata-sets/:metadataSetId       @org.corespring.v2.api.MetadataApi.update(metadataSetId: ObjectId)

DELETE  /metadata-sets/:metadataSetId       @org.corespring.v2.api.MetadataApi.delete(metadataSetId: ObjectId)


# Assessments

GET     /assessments                                    @org.corespring.v2.api.AssessmentApi.get(author_id: Option[String] ?= None)

GET     /assessments/:assessmentIds                     @org.corespring.v2.api.AssessmentApi.getByIds(assessmentIds: String)

PUT     /assessments/:assessmentId                      @org.corespring.v2.api.AssessmentApi.update(assessmentId: ObjectId)

POST    /assessments                                    @org.corespring.v2.api.AssessmentApi.create()

PUT     /assessments/:assessmentId/add-answer           @org.corespring.v2.api.AssessmentApi.addAnswer(assessmentId: ObjectId, external_id: Option[String] ?= None)

PUT     /assessments/:assessmentId/add-participants     @org.corespring.v2.api.AssessmentApi.addParticipants(assessmentId: ObjectId)


# Assessment Templates

GET     /assessment-templates                           @org.corespring.v2.api.AssessmentTemplateApi.get

GET     /assessment-templates/:assessmentTemplateId     @org.corespring.v2.api.AssessmentTemplateApi.getById(assessmentTemplateId: ObjectId)

POST    /assessment-templates                           @org.corespring.v2.api.AssessmentTemplateApi.create()

PUT     /assessment-templates/:assessmentTemplateId     @org.corespring.v2.api.AssessmentTemplateApi.update(assessmentTemplateId: ObjectId)