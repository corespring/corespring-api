GET     /items/:itemId/drafts              @org.corespring.v2.api.drafts.item.ItemDrafts.listByItem(itemId:String)
POST    /items/:itemId/draft               @org.corespring.v2.api.drafts.item.ItemDrafts.create(itemId:String)
PUT     /items/drafts/:draftId/commit      @org.corespring.v2.api.drafts.item.ItemDrafts.commit(draftId:String, force: Option[Boolean] ?= None)
#PUT     /items/drafts/:draftId/publish     @org.corespring.v2.api.drafts.item.ItemDrafts.publish(draftId:String)
PUT     /items/drafts/:draftId/clone       @org.corespring.v2.api.drafts.item.ItemDrafts.cloneDraft(draftId:String)
PUT     /items/drafts/:draftId/conflict    @org.corespring.v2.api.drafts.item.ItemDrafts.conflict(draftId:String)
GET     /items/drafts/:draftId             @org.corespring.v2.api.drafts.item.ItemDrafts.get(draftId:String, ignoreConflicts: Option[Boolean] ?= None)
PUT     /items/drafts/:draftId             @org.corespring.v2.api.drafts.item.ItemDrafts.save(draftId:String)
DELETE  /items/drafts/:draftId             @org.corespring.v2.api.drafts.item.ItemDrafts.delete(draftId:String, all: Option[Boolean] ?= None)
GET     /items/drafts                      @org.corespring.v2.api.drafts.item.ItemDrafts.getDraftsForOrg()

GET     /sessions/:sessionId               @org.corespring.v2.api.ItemSessionApi.get(sessionId:String)
POST    /sessions/:sessionId/clone         @org.corespring.v2.api.ItemSessionApi.cloneSession(sessionId: String)
PUT     /sessions/:sessionId/reopen        @org.corespring.v2.api.ItemSessionApi.reopen(sessionId: String)
PUT     /sessions/:sessionId/complete      @org.corespring.v2.api.ItemSessionApi.complete(sessionId: String)

## Check a score
## Load the score based on the saved response
GET  /sessions/:sessionId/score.json       @org.corespring.v2.api.ItemSessionApi.loadScore(sessionId:String)

POST /items/:itemId/sessions               @org.corespring.v2.api.ItemSessionApi.create(itemId:VersionedId[ObjectId])

POST /items                                @org.corespring.v2.api.ItemApi.create()


PUT  /items/:itemId/check-score.json       @org.corespring.v2.api.ItemApi.checkScore(itemId:String)

POST /player-token                         @org.corespring.v2.api.PlayerTokenApi.createPlayerToken

GET  /sessions/:sessionId                  @org.corespring.v2.api.ItemSessionApi.get(sessionId:String)

POST /items/:itemId/sessions               @org.corespring.v2.api.ItemSessionApi.create(itemId:VersionedId[ObjectId])

GET  /items/:itemId/full                   @org.corespring.v2.api.V1ItemApiProxy.get(itemId: VersionedId[ObjectId], detail : Option[String] ?= Some("normal"))

GET  /items/:itemId                        @org.corespring.v2.api.ItemApi.get(itemId:String, detail : Option[String] ?= Some("normal"))

DELETE /items/:itemId                      @org.corespring.v2.api.ItemApi.delete(itemId:String)

POST /items                                @org.corespring.v2.api.ItemApi.create()

GET  /items                                @org.corespring.v2.api.ItemApi.search(query: Option[String] ?= None)

POST /items/:itemId/clone                  @org.corespring.v2.api.ItemApi.cloneItem(itemId)

PUT /items/:itemId/publish                 @org.corespring.v2.api.ItemApi.publish(itemId)

PUT /items/:itemId/save-new-version        @org.corespring.v2.api.ItemApi.saveNewVersion(itemId)

GET  /items                                @org.corespring.v2.api.V1ItemApiProxy.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)

POST /launch-item                          @org.corespring.v2.api.ExternalModelLaunchApi.buildExternalLaunchSession()

GET  /collections/:collectionId/items      @org.corespring.v2.api.V1ItemApiProxy.listWithColl(collectionId:ObjectId, q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)

GET  /collections/:collectionId            @org.corespring.v2.api.V1CollectionApiProxy.getCollection(collectionId: ObjectId)

GET  /collections                          @org.corespring.v2.api.V1CollectionApiProxy.list(q: Option[String] ?= None, f: Option[String] ?= None, c ?= "false", sk: Int ?= 0, l: Int ?= 50, sort:Option[String] ?= None)

GET  /item-types                           @org.corespring.v2.api.ItemApi.getItemTypes()

GET  /contributors                         @org.corespring.v2.api.FieldValuesApi.get(field = "contributorDetails.contributor")

GET  /grade-levels                         @org.corespring.v2.api.FieldValuesApi.get(field = "taskInfo.gradeLevel")

GET  /internal/flush-caches                @org.corespring.v2.api.Utils.flushCaches


# Metadata

GET     /metadata-sets                      @org.corespring.v2.api.MetadataApi.get

GET     /metadata-sets/:metadataSetId       @org.corespring.v2.api.MetadataApi.getById(metadataSetId: ObjectId)

GET     /item/:itemId/metadata              @org.corespring.v2.api.MetadataApi.getByItemId(itemId: VersionedId[ObjectId])

POST    /metadata-sets                      @org.corespring.v2.api.MetadataApi.create()

PUT     /metadata-sets/:metadataSetId       @org.corespring.v2.api.MetadataApi.update(metadataSetId: ObjectId)

DELETE  /metadata-sets/:metadataSetId       @org.corespring.v2.api.MetadataApi.delete(metadataSetId: ObjectId)


# Assessments

GET     /assessments                                    @org.corespring.v2.api.AssessmentApi.get(author_id: Option[String] ?= None)

GET     /assessments/:assessmentIds                     @org.corespring.v2.api.AssessmentApi.getByIds(assessmentIds: String)

PUT     /assessments/:assessmentId                      @org.corespring.v2.api.AssessmentApi.update(assessmentId: ObjectId)

POST    /assessments                                    @org.corespring.v2.api.AssessmentApi.create()

PUT     /assessments/:assessmentId/add-answer           @org.corespring.v2.api.AssessmentApi.addAnswer(assessmentId: ObjectId, external_id: Option[String] ?= None)

PUT     /assessments/:assessmentId/add-participants     @org.corespring.v2.api.AssessmentApi.addParticipants(assessmentId: ObjectId)


# Assessment Templates

GET     /assessment-templates                           @org.corespring.v2.api.AssessmentTemplateApi.get

GET     /assessment-templates/:assessmentTemplateId     @org.corespring.v2.api.AssessmentTemplateApi.getById(assessmentTemplateId: ObjectId)

POST    /assessment-templates                           @org.corespring.v2.api.AssessmentTemplateApi.create()

PUT     /assessment-templates/:assessmentTemplateId     @org.corespring.v2.api.AssessmentTemplateApi.update(assessmentTemplateId: ObjectId)